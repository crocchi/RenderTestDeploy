<script>
 
let browserCheck= ()=> {
    // compatibility 100% info browser
	let nav =         navigator.userAgent;
    let languageSet=  navigator.language;
    let vendor=       navigator.vendor
    let brand="",brandVersion="";
    // no comp firefox,safari,firefox androdi,safari ios,webview android
    try {
        brand=        navigator.userAgentData.brands[0].brand;
        brandVersion= navigator.userAgentData.brands[0].version;
} catch (err) {
  console.log("browser not Compatible 100%")
}
   
    
    let domArea=document.getElementById('browserDtext');
    let domA=document.getElementById('browserTextArea');
    let tempF="";
    let dataTot=[nav,languageSet,vendor,brand,brandVersion];
    let dataInfo=["User Agent:","Language:","Vendor:","Browser:","Version:"]
    dataTot.forEach((currentElement,index) => {
        if (currentElement==null){ 
            
        }else{
         /* 
         let p=document.createElement('p');
         p.innerText=dataInfo[index]+" "+dataTot[index];
         domArea.appendChild(p);
         ... */ 

         tempF+=dataInfo[index]+" "+dataTot[index]+"\n";
        }})
        domA.innerHTML=tempF;
/*  browserTextArea
    domArea.innerHTML="<p> User Agent:"+nav+"</p> <p>Language:"+languageSet +" </p>";
    domArea.innerHTML+="<p> Vendor:"+vendor+"</p>";
    domArea.innerHTML+="<p><b> Browser</b>:"+brand+"</p>";
    domArea.innerHTML+="<p> Version:"+brandVersion+"</p><br>";
    */
}


// Funzione per ottenere il nome e la versione del browser
function getBrowserInfo() {
  var ua = navigator.userAgent;
  var tem;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return { name: 'IE', version: (tem[1] || '') };
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
        if (tem != null) return { name: tem[1].replace('OPR', 'Opera'), version: tem[2] };
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    tem = ua.match(/version\/(\d+)/i);
    if (tem != null) M.splice(1, 1, tem[1]);
    return {
        name: M[0],
        version: M[1]
    };
}

// Ottieni le informazioni sul browser
var browser = getBrowserInfo();

// Mostra le informazioni del browser nella console
document.getElementById('browserTextArea').innerText="Browser:"+browser.name+"\n "+"Versione:"+browser.version;





/*
function DETECTBROWSER() {
	var HREFF,
		HREFTXT = "unknown";
	this.NAVIGATOR = navigator.userAgent;
	var NAV = navigator.userAgent;
	var gecko,
		navIpad,
		operatablet,
		navIphone,
		navFirefox,
		navChrome,
		navOpera,
		navSafari,
		navandroid,
		mobile,
		navMozilla,
		navUbuntu,
		navLinux;
	navLinux = NAV.match(/Linux/gi);
	navUbuntu = NAV.match(/Ubuntu/gi);
	gecko = NAV.match(/gecko/gi);
	navOpera = (NAV.match(/Opera|OPR\//) ? true : false);
	operatablet = NAV.match(/Tablet/gi);
	navIpad = NAV.match(/ipad/gi);
	navIphone = NAV.match(/iphone/gi);
	navFirefox = NAV.match(/Firefox/gi);
	navMozilla = NAV.match(/mozilla/gi);
	navChrome = NAV.match(/Chrome/gi);
	navSafari = NAV.match(/safari/gi);
	navandroid = NAV.match(/android/gi);
	mobile = NAV.match(/mobile/gi);
	window["TYPEOFANDROID"] = 0;
	window["NOMOBILE"] = 0;

	var mobile = (/iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase()));
	if (mobile) {
		var userAgent = navigator.userAgent.toLowerCase();
		if ((userAgent.search("android") > -1) && (userAgent.search("mobile") > -1)) {
			console.log("ANDROID MOBILE");
		} else if ((userAgent.search("android") > -1) && !(userAgent.search("mobile") > -1)) {
			console.log(" ANDROID TABLET ");
			TYPEOFANDROID = 1;
		}

	} else {
		NOMOBILE = 1;
	}
	//  FIREFOX za android
	if (navFirefox && navandroid && TYPEOFANDROID == 0) {
		HREFF = "#";
		HREFTXT = "mobile_firefox_android";
	}
	//  FIREFOX za android T
	if (navFirefox && navandroid && TYPEOFANDROID == 1) {
		HREFF = "#";
		HREFTXT = "mobile_firefox_android_tablet";
	}
	// OPERA ZA ANDROID
	if (navOpera && navandroid) {
		HREFF = "#";
		HREFTXT = "opera_mobile_android";
	} // provera
	// OPERA ZA ANDROID TABLET
	if (navOpera && navandroid && operatablet) {
		HREFF = "#";
		HREFTXT = "opera_mobile_android_tablet";
	} // provera
	//  safari mobile za IPHONE - i  safari mobile za IPAD i CHROME za IPAD
	if (navSafari) {
		var Iphonesafari = NAV.match(/iphone/gi);
		if (Iphonesafari) {
			HREFF = "#";
			HREFTXT = "safari_mobile_iphone";
		} else if (navIpad) {
			HREFF = "#";
			HREFTXT = "mobile_safari_chrome_ipad";
		} else if (navandroid) {
			HREFF = "#";
			HREFTXT = "android_native";
		}
	}
	// TEST CHROME
	if (navChrome && navSafari && navMozilla && TYPEOFANDROID == 1) {
		HREFF = "#";
		HREFTXT = "mobile_chrome_android_tablet";
	}
	if (navChrome && navSafari && navMozilla && TYPEOFANDROID == 0) {
		HREFF = "#";
		HREFTXT = "mobile_chrome_android";
	}
	if (navChrome && TYPEOFANDROID == 0) {
		HREFF = "#";
		HREFTXT = "chrome_browser";
	}
	if (navMozilla && NOMOBILE == 1 && gecko && navFirefox) {
		HREFF = "#";
		HREFTXT = "firefox_desktop";
	}
	if (navOpera && TYPEOFANDROID == 0 && !mobile) {
		HREFF = "#";
		HREFTXT = "opera_desktop";
	}

	//linux
	if (navUbuntu && navMozilla && navFirefox && navLinux) {
		HREFF = "#";
		HREFTXT = "firefox_desktop_linux";
	}
	if (navMozilla && navLinux && navChrome && navSafari) {
		HREFF = "#";
		HREFTXT = "chrome_desktop_linux";
	}
	if (navMozilla && navLinux && navChrome && navSafari && navOpera) {
		HREFF = "#";
		HREFTXT = "opera_desktop_linux";
	}

	/**
	* Template for this view's container...
	* NOMOBILE = 1 means desktop platform
	* @example This is ENUMERATORS for property NAME :
	* "mobile_firefox_android" 
	* "mobile_firefox_android_tablet" 
	* "opera_mobile_android" 
	* "opera_mobile_android_tablet"
	* "safari_mobile_iphone"
	* "mobile_safari_chrome_ipad"
	* "android_native"
	* "mobile_chrome_android_tablet"
	* "mobile_chrome_android"
	* "chrome_browser"
	* "firefox_desktop"
	* "opera_desktop"
	* "firefox_desktop_linux"
	* "chrome_desktop_linux"
	* "opera_desktop_linux" .
	* @property NAME
	* @type {String}
	* @default "unknown"
	
	this.NAME = HREFTXT;
	/**
	* NOMOBILE = 1 Means desktop platform (Any win , mac or linux etc..)
	* NOMOBILE = 2 Means mobile platform (iOS , android etc.)
	* @property NOMOBILE
	* @type Number
	* @default "unknown"
	
	this.NOMOBILE = NOMOBILE;
}


var BROWSER = new DETECTBROWSER();

if (NOMOBILE == 0) {
//MOBILE DEVICES

window.addEventListener("touchstart",  function(event) {
  
  if (event.target === modal) {
    modal.style.display = "none";
  }
  
} , false); 



}
else {

window.addEventListener("click",  function(event) {
  
  if (event.target === modal) {
    modal.style.display = "none";
  }
  
} , false); 

}
*/

</script>